"""
Test case for GeometryAgent with a dynamic prompt for the Sun
"""

import os
import sys
from geometry_agent import GeometryAgent
from llm_service import LLMService  # Import the actual LLM service

def test_geometry_agent():
    # Get the prompt from command line args or use default
    prompt = "the Sun"
    if len(sys.argv) > 1:
        prompt = sys.argv[1]
    
    # Create the actual LLM service (not a mock)
    llm_service = LLMService()
    
    # Create the geometry agent
    agent = GeometryAgent(llm_service)
    
    # Test with the specified prompt - this will query the actual LLM
    print(f"Requesting Three.js geometry for: {prompt}")
    result = agent.get_geometry_snippet(prompt)
    
    # Print the result
    print("Generated code:")
    print(result)
    
    # Create HTML test file
    html_content = generate_test_html(result)
    
    # Save the HTML to a file
    with open("test_geometry.html", "w") as f:
        f.write(html_content)
    
    print(f"Test HTML file created: {os.path.abspath('test_geometry.html')}")

def generate_test_html(geometry_code):
    """Generate an HTML file with Three.js that includes the geometry code."""
    return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geometry Agent Test</title>
    <style>
        body {{ margin: 0; overflow: hidden; }}
        canvas {{ width: 100%; height: 100%; display: block; }}
    </style>
</head>
<body>
    <!-- Main Three.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- OrbitControls add-on -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    
    <script>
        // Set up scene, camera and renderer
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x000033); // Dark blue background for space
        
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 10; // Position camera further back for better view
        
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        
        // Add lights
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
        directionalLight.position.set(1, 1, 1).normalize();
        scene.add(directionalLight);
        
        // Add geometry from GeometryAgent - this is the code generated by the LLM
        {geometry_code}
        
        // Add orbit controls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;
        
        // Animation loop
        function animate() {{
            requestAnimationFrame(animate);
            
            // Rotate the object if it exists
            if (window.molecule) {{
                window.molecule.rotation.y += 0.005;
            }}
            
            controls.update();
            renderer.render(scene, camera);
        }}
        
        // Handle window resize
        window.addEventListener('resize', () => {{
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }});
        
        // Run animation
        animate();
    </script>
</body>
</html>"""

if __name__ == "__main__":
    test_geometry_agent()